{"version":3,"sources":["constants/routes.js","components/AppHeader/AppHeader.js","components/Footer/Footer.js","components/Main/Main.js","hoc/withLayout.js","api/api.js","components/RaceCard/RaceCard.js","components/RaceList/RaceList.js","pages/Home/Home.js","constants/drivers.js","components/RacePosition/RacePosition.js","pages/RaceTelemetry/RaceTelemetry.js","App.js","reportWebVitals.js","index.js"],"names":["RACE_TELEMETRY","AppHeader","className","to","Footer","Main","children","props","withLayout","WrappedComponent","displayName","name","getDisplayName","makeErgastApi","axios","create","baseURL","makeF1Api","getSeasonSchedule","year","api","get","getRaceTelemetry","gpNameUnderscores","date","RaceCard","raceInfo","history","useHistory","class","round","raceName","JSON","stringify","href","Circuit","url","circuitName","Location","locality","country","type","onClick","push","route","season","RaceList","racesArray","map","race","useState","apiData","setData","isError","isLoading","loadStatus","setLoadStatus","a","data","console","log","useEffect","loadSeasonSchedule","MRData","RaceTable","Races","DRIVERS","dataName","lastName","teamColor","RacePosition","positionData","totalLaps","inputArray","drivers","processedDataArray","Array","outputDrivers","forEach","driver","outputDriver","find","element","index","objectToMerge","Math","ceil","lap","dataProcess","Paper","elevation","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","label","value","position","offset","YAxis","Tooltip","Legend","Line","stroke","setApiData","match","useRouteMatch","loadRaceTelemetry","params","LapPos","graph","commentary","TL","App","exact","path","render","routeProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.522f7b9b.chunk.js","sourcesContent":["export const ERGAST_BASE_URL = \"http://ergast.com/api/f1\";\r\nexport const F1_BASE_URL = \"https://livetiming.formula1.com/static\";\r\nexport const HOME = \"/\";\r\nexport const RACE_TELEMETRY = \"/race-telemetry\";\r\nexport const ABOUT = \"/about\";\r\nexport const OTHER_CATEGORIES = \"/other\";\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport * as route from \"../../constants/routes\";\r\n\r\nexport default function AppHeader() {\r\n  return (\r\n    <header className=\"container-fluid red-background\">\r\n      <NavLink to={route.HOME}>Home</NavLink>\r\n      {/* <NavLink to={route.RACE_TELEMETRY}>Race Telemetry</NavLink> */}\r\n      <NavLink to={route.ABOUT}>About</NavLink>\r\n      <NavLink to={route.OTHER_CATEGORIES}>Other Categories</NavLink>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return <div>Footer</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Main({ children, ...props }) {\r\n  return <main {...props}>{children}</main>;\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nimport AppHeader from \"../components/AppHeader\";\r\nimport Footer from \"../components/Footer\";\r\nimport Main from \"../components/Main\";\r\n\r\nfunction getDisplayName(WrappedComponent) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\r\n}\r\n\r\n/* eslint no-param-reassign: [2, { \"props\": false }] */\r\nfunction withLayout(WrappedComponent) {\r\n  WrappedComponent.displayName = `withLayout(${getDisplayName(\r\n    WrappedComponent\r\n  )})`;\r\n\r\n  function WrapperComponent({ ...props }) {\r\n    return (\r\n      <>\r\n        <AppHeader />\r\n        <Main>\r\n          <WrappedComponent {...props} />\r\n        </Main>\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return WrapperComponent;\r\n}\r\n\r\nexport default withLayout;\r\n","import axios from \"axios\";\r\nimport { ERGAST_BASE_URL, F1_BASE_URL } from \"../constants/routes\";\r\n\r\nexport function makeErgastApi() {\r\n  return axios.create({\r\n    baseURL: ERGAST_BASE_URL,\r\n  });\r\n}\r\nexport function makeF1Api() {\r\n  return axios.create({\r\n    baseURL: F1_BASE_URL,\r\n    // headers: {\r\n    //   \"Access-Control-Allow-Origin\": null,\r\n    // },\r\n  });\r\n}\r\n\r\nexport function getSeasonSchedule(year = 2020, api = makeErgastApi()) {\r\n  return api.get(`/${year}.json`);\r\n}\r\n\r\nexport function getInfoOfRace(year = 2020, round = 1, api = makeErgastApi()) {\r\n  return api.get(`/${year}/${round}.json`);\r\n}\r\n\r\nexport function getRaceTelemetry(\r\n  year = \"2020\",\r\n  gpNameUnderscores = \"Austrian_Grand_Prix\",\r\n  date = \"2020-07-05\",\r\n  api = makeF1Api()\r\n) {\r\n  return api.get(\r\n    `/${year}/${date}_${gpNameUnderscores}/${date}_Race/SPFeed.json`\r\n  );\r\n}\r\n\r\n//https://livetiming.formula1.com/static/{{year}}/{{date}}_{{gpNameUnserscores}}/{{date}}_Race/SPFeed.json\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport * as route from \"../../constants/routes\";\r\n\r\nexport default function RaceCard({ raceInfo }) {\r\n  const history = useHistory();\r\n\r\n  function handleClick() {\r\n    history.push(\r\n      `${route.RACE_TELEMETRY}/${raceInfo.season}/${raceInfo.round}`\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div class=\"card\">\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">\r\n          Round {raceInfo.round} - {raceInfo.raceName}\r\n        </h5>\r\n        <p className=\"card-text\">{JSON.stringify(raceInfo)}</p>\r\n        <p className=\"card-text\">Date: {raceInfo.date}</p>\r\n        <p className=\"card-text\">\r\n          Circuit:{\" \"}\r\n          <a href={raceInfo.Circuit.url}>{raceInfo.Circuit.circuitName}</a>\r\n          {\" ( \"}\r\n          {raceInfo.Circuit.Location.locality}\r\n          {\" - \"}\r\n          {raceInfo.Circuit.Location.country}\r\n          {\" )\"}\r\n          <button type=\"button\" onClick={handleClick}>\r\n            Race Data\r\n          </button>\r\n          {/* TODO : add button to open */}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport RaceCard from \"../RaceCard\";\r\n\r\nexport default function RaceList({ racesArray }) {\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <h3>F1 2020 temporary</h3>\r\n        <div className=\"col\">\r\n          {racesArray.map((race) => {\r\n            return (\r\n              <RaceCard key={race.round} raceInfo={race}>\r\n                {race.raceName}\r\n              </RaceCard>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\n\nimport withLayout from \"../../hoc/withLayout\";\n\nimport { getSeasonSchedule } from \"../../api\";\n\nimport RaceList from \"../../components/RaceList\";\n\nfunction Home() {\n  const [apiData, setData] = useState({});\n  const [loadStatus, setLoadStatus] = useState({\n    isError: false,\n    isLoading: true,\n  });\n\n  useEffect(() => {\n    loadSeasonSchedule(2020);\n  }, []);\n\n  async function loadSeasonSchedule(year) {\n    try {\n      const { data } = await getSeasonSchedule(year);\n      setData(data);\n      console.log(data);\n      setLoadStatus({ isError: false, isLoading: false });\n    } catch (error) {\n      setData(error);\n      setLoadStatus({ isError: true, isLoading: false });\n    }\n  }\n\n  return (\n    <div>\n      {/* {JSON.stringify(apiData)} */}\n      {!loadStatus.isLoading && !loadStatus.isError && (\n        <RaceList racesArray={apiData.MRData.RaceTable.Races} />\n      )}\n      {loadStatus.isLoading && !loadStatus.isError && (\n        <h3>Currently loading...</h3>\n      )}\n      {loadStatus.isError && !loadStatus.isLoading && <h3>ERROR</h3>}\n    </div>\n  );\n}\n\nexport default withLayout(Home);\n","export const DRIVERS = [\r\n  { dataName: \"pNOR\", lastName: \"Norris\", teamColor: \"#ffa112\" },\r\n  { dataName: \"pHAM\", lastName: \"Hamilton\", teamColor: \"#00D2BE\" },\r\n  { dataName: \"pBOT\", lastName: \"Bottas\", teamColor: \"#00D2BE\" },\r\n  { dataName: \"pVER\", lastName: \"Verstappen\", teamColor: \"#0600EF\" },\r\n  { dataName: \"pALB\", lastName: \"Albon\", teamColor: \"#0600EF\" },\r\n];\r\n","import React from \"react\";\r\n\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport { DRIVERS } from \"../../constants/drivers\";\r\n\r\nexport default function RacePosition({ positionData, totalLaps }) {\r\n  function dataProcess(inputArray = [], drivers = []) {\r\n    let processedDataArray = new Array(totalLaps + 1);\r\n    console.log(processedDataArray);\r\n    let outputDrivers = [];\r\n\r\n    console.log(positionData);\r\n    drivers.forEach((driver) => {\r\n      // const driver = drivers[0];\r\n      const outputDriver = DRIVERS.find(\r\n        (element) => element.dataName === driver\r\n      );\r\n      outputDrivers.push(outputDriver);\r\n      inputArray[driver].forEach((element, index) => {\r\n        if (index % 2 !== 0) {\r\n          let objectToMerge = {};\r\n          objectToMerge[driver] = element;\r\n          processedDataArray[Math.ceil(index / 2) - 1] = {\r\n            lap: Math.ceil(index / 2),\r\n            ...processedDataArray[Math.ceil(index / 2) - 1],\r\n            ...objectToMerge,\r\n          };\r\n        }\r\n      });\r\n    });\r\n    console.log(processedDataArray);\r\n    console.log(outputDrivers);\r\n    return { processedDataArray, outputDrivers };\r\n  }\r\n  const { processedDataArray, outputDrivers } = dataProcess(positionData, [\r\n    \"pNOR\",\r\n    \"pHAM\",\r\n    \"pVER\",\r\n  ]);\r\n  return (\r\n    <Paper elevation={3}>\r\n      <LineChart\r\n        width={1000}\r\n        height={500}\r\n        data={processedDataArray}\r\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis\r\n          dataKey=\"lap\"\r\n          label={{ value: \"Lap\", position: \"insideBottomLeft\", offset: 0 }}\r\n        />\r\n        <YAxis\r\n          label={{\r\n            value: \"Position\",\r\n            position: \"insideBottomCenter\",\r\n            offset: 0,\r\n          }}\r\n        />\r\n        <Tooltip />\r\n        <Legend />\r\n        {outputDrivers.map((element) => (\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey={element.dataName}\r\n            label={element.lastName}\r\n            stroke={element.teamColor}\r\n          />\r\n        ))}\r\n        {/* <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" /> */}\r\n      </LineChart>\r\n    </Paper>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\n\r\nimport withLayout from \"../../hoc/withLayout\";\r\nimport RacePosition from \"../../components/RacePosition\";\r\n\r\nimport * as route from \"../../constants/routes\";\r\n\r\nimport { getRaceTelemetry } from \"../../api\";\r\n\r\nfunction RaceTelemetry() {\r\n  const [apiData, setApiData] = useState({});\r\n  const [loadStatus, setLoadStatus] = useState({\r\n    isError: false,\r\n    isLoading: true,\r\n  });\r\n  const match = useRouteMatch(`${route.RACE_TELEMETRY}/:season/:round`);\r\n\r\n  useEffect(() => {\r\n    // const season = match.params.season;\r\n    // const round = match.params.round;\r\n\r\n    loadRaceTelemetry(); //! Temporary using default values\r\n\r\n    async function loadRaceTelemetry() {\r\n      try {\r\n        const { data } = await getRaceTelemetry(); //! Temporary using default values\r\n        setApiData(data);\r\n        setLoadStatus({ isError: false, isLoading: false });\r\n        console.log(data);\r\n      } catch (error) {\r\n        setApiData(error);\r\n        setLoadStatus({ isError: true, isLoading: false });\r\n      }\r\n    }\r\n  }, [match.params.round, match.params.season]);\r\n\r\n  return (\r\n    <>\r\n      {loadStatus.isLoading && !loadStatus.isError && (\r\n        <h3>Currently loading...</h3>\r\n      )}\r\n      {!loadStatus.isLoading && loadStatus.isError && (\r\n        <>\r\n          <h3>Error with API</h3>\r\n          <p>{JSON.stringify(apiData)}</p>\r\n        </>\r\n      )}\r\n      {!loadStatus.isLoading && !loadStatus.isError && (\r\n        <>\r\n          <RacePosition\r\n            positionData={apiData.LapPos.graph.data}\r\n            totalLaps={apiData.commentary.data.TL}\r\n          />\r\n          <p>{JSON.stringify(apiData)}</p>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withLayout(RaceTelemetry);\r\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\n\nimport * as route from \"./constants/routes\";\n\nimport RaceTelemetry from \"./pages/RaceTelemetry\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n      <BrowserRouter>\n        {/* <Route\n          path={`${LOCATION}/:locationId`}\n          render={(routeProps) => <Location {...routeProps} />}\n        />\n        <Route\n          path={`${CHARACTER}/:characterId`}\n          render={(routeProps) => <Character {...routeProps} />}\n        />\n\n        <Route\n          path={`${EPISODE}/:episodeId`}\n          render={(routeProps) => <Episode {...routeProps} />}\n        /> */}\n\n        <Route\n          exact\n          path={`${route.RACE_TELEMETRY}/:season/:round`}\n          render={(routeProps) => <RaceTelemetry {...routeProps} />}\n        />\n        <Route\n          exact\n          path={route.HOME}\n          render={(routeProps) => <Home {...routeProps} />}\n        />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./sass/main.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}